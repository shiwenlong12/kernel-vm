var searchIndex = JSON.parse('{\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"p":[]},\
"kernel_vm":{"doc":"内核虚存管理。","t":[3,8,10,12,11,11,10,11,10,10,11,11,11,11,11,11,10,10,11,11,11,10,11,11,11,11,10],"n":["AddressSpace","PageManager","allocate","areas","borrow","borrow_mut","check_owned","cloneself","deallocate","drop_root","fmt","from","into","map","map_extern","new","new_root","p_to_v","root","root_ppn","root_ppn","root_ptr","translate","try_from","try_into","type_id","v_to_p"],"q":["kernel_vm","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["地址空间。","物理页管理。","为地址空间分配 <code>len</code> 个物理页。","虚拟地址块","","","检查是否拥有一个页的所有权。","…","从地址空间释放 <code>pte</code> 指示的 <code>len</code> 个物理页。","释放根页表。","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","分配新的物理页，拷贝数据并建立映射。","向地址空间增加映射关系。","创建新地址空间。","新建根页表页。","计算当前地址空间上指向物理页的指针。","地址空间根页表","地址空间根页表的物理页号。","获取根页表的物理页号。","获取根页表。","检查 <code>flags</code> …","","","","计算当前地址空间上的指针指向的物理页。"],"i":[0,0,8,9,9,9,8,9,8,8,9,9,9,9,9,9,8,8,9,9,8,8,9,9,9,9,8],"f":[0,0,[[1,2],[[4,[3]]]],0,[[]],[[]],[5,6],[[[9,[7,[8,[7]]]],9]],[[5,1],1],[[]],[[[9,[7,[8,[7]]]],10],11],[[]],[[]],[[[9,[7,[8,[7]]]],[13,[[12,[7]]]],1,[2,[7]]]],[[[9,[7,[8,[7]]]],[13,[[12,[7]]]],[14,[7]],[2,[7]]]],[[],[[9,[7,[8,[7]]]]]],[[]],[14,4],[[[9,[7,[8,[7]]]]],[[15,[7]]]],[[[9,[7,[8,[7]]]]],[[14,[7]]]],[[],14],[[],[[4,[5]]]],[[[9,[7,[8,[7]]]],[16,[7]],[2,[7]]],[[17,[4]]]],[[],18],[[],18],[[],19],[4,14]],"p":[[15,"usize"],[3,"VmFlags"],[15,"u8"],[3,"NonNull"],[3,"Pte"],[15,"bool"],[8,"VmMeta"],[8,"PageManager"],[3,"AddressSpace"],[3,"Formatter"],[6,"Result"],[6,"VPN"],[3,"Range"],[6,"PPN"],[3,"PageTable"],[3,"VAddr"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"lock_api":{"doc":"This library provides type-safe and fully-featured <code>Mutex</code> …","t":[16,16,8,16,16,3,3,18,18,18,18,16,16,3,3,3,3,3,3,8,8,8,3,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,10,10,11,11,11,10,10,10,10,10,10,10,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11],"n":["Duration","Duration","GetThreadId","GuardMarker","GuardMarker","GuardNoSend","GuardSend","INIT","INIT","INIT","INIT","Instant","Instant","MappedMutexGuard","MappedReentrantMutexGuard","MappedRwLockReadGuard","MappedRwLockWriteGuard","Mutex","MutexGuard","RawMutex","RawMutexFair","RawMutexTimed","RawReentrantMutex","RawRwLock","RawRwLockDowngrade","RawRwLockFair","RawRwLockRecursive","RawRwLockRecursiveTimed","RawRwLockTimed","RawRwLockUpgrade","RawRwLockUpgradeDowngrade","RawRwLockUpgradeFair","RawRwLockUpgradeTimed","ReentrantMutex","ReentrantMutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","bump","bump","bump","bump","bump","bump","bump","bump_exclusive","bump_exclusive","bump_shared","bump_shared","bump_upgradable","bump_upgradable","const_new","const_new","const_new","data_ptr","data_ptr","data_ptr","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradable","downgrade_to_upgradable","downgrade_upgradable","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_unlock","force_unlock","force_unlock_fair","force_unlock_fair","force_unlock_read","force_unlock_read_fair","force_unlock_write","force_unlock_write_fair","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked_exclusive","is_locked_exclusive","is_locked_exclusive","is_owned_by_current_thread","is_owned_by_current_thread","leak","lock","lock","lock","lock","lock_exclusive","lock_shared","lock_shared_recursive","lock_upgradable","map","map","map","map","map","map","map","map","mutex","new","new","new","nonzero_thread_id","raw","raw","raw","read","read_recursive","remutex","rwlock","rwlock","rwlock","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","try_lock","try_lock_exclusive","try_lock_exclusive_for","try_lock_exclusive_until","try_lock_for","try_lock_for","try_lock_for","try_lock_for","try_lock_shared","try_lock_shared_for","try_lock_shared_recursive","try_lock_shared_recursive_for","try_lock_shared_recursive_until","try_lock_shared_until","try_lock_until","try_lock_until","try_lock_until","try_lock_until","try_lock_upgradable","try_lock_upgradable_for","try_lock_upgradable_until","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_read","try_read_for","try_read_recursive","try_read_recursive_for","try_read_recursive_until","try_read_until","try_upgradable_read","try_upgradable_read_for","try_upgradable_read_until","try_upgrade","try_upgrade","try_upgrade_for","try_upgrade_for","try_upgrade_until","try_upgrade_until","try_write","try_write_for","try_write_until","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock","unlock_exclusive","unlock_exclusive_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_shared","unlock_shared_fair","unlock_upgradable","unlock_upgradable_fair","unlocked","unlocked","unlocked","unlocked","unlocked","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","upgradable_read","upgrade","upgrade","write"],"q":["lock_apid":["Duration type used for <code>try_lock_for</code>.","Duration type used for <code>try_lock_for</code>.","Helper trait which returns a non-zero thread ID.","Marker type which determines whether a lock guard should …","Marker type which determines whether a lock guard should …","Marker type which indicates that the Guard type for a lock …","Marker type which indicates that the Guard type for a lock …","Initial value for an unlocked mutex.","Initial value.","Initial value for an unlocked mutex.","Initial value for an unlocked <code>RwLock</code>.","Instant type used for <code>try_lock_until</code>.","Instant type used for <code>try_lock_until</code>.","An RAII mutex guard returned by <code>MutexGuard::map</code>, which can …","An RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …","An RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …","An RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","Basic operations for a mutex.","Additional methods for mutexes which support fair …","Additional methods for mutexes which support locking with …","A raw mutex type that wraps another raw mutex to provide …","Basic operations for a reader-writer lock.","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support fair …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support locking with …","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","A mutex which can be recursively locked by a single thread.","An RAII implementation of a “scoped lock” of a …","A reader-writer lock","RAII structure used to release the shared read access of a …","RAII structure used to release the upgradable read access …","RAII structure used to release the exclusive write access …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields an upgradable lock to a waiting thread …","Temporarily yields an upgradable lock to a waiting thread …","Creates a new mutex based on a pre-existing raw mutex.","Creates a new reentrant mutex based on a pre-existing raw …","Creates a new new instance of an <code>RwLock&lt;T&gt;</code> based on a …","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","","","","","","","","","","","","","","","","","Atomically downgrades an exclusive lock into a shared lock …","Atomically downgrades a write lock into a read lock …","Atomically downgrades an upgradable read lock lock into a …","Downgrades an exclusive lock to an upgradable lock.","Atomically downgrades a write lock into an upgradable read …","Downgrades an upgradable lock to a shared lock.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Forcibly unlocks the mutex.","Forcibly unlocks the mutex.","Forcibly unlocks the mutex using a fair unlock procotol.","Forcibly unlocks the mutex using a fair unlock protocol.","Forcibly unlocks a read lock.","Forcibly unlocks a read lock using a fair unlock procotol.","Forcibly unlocks a write lock.","Forcibly unlocks a write lock using a fair unlock procotol.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this mutex, returning the underlying data.","Consumes this mutex, returning the underlying data.","Consumes this <code>RwLock</code>, returning the underlying data.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks whether this <code>RwLock</code> is currently locked in any way.","Check if this <code>RwLock</code> is currently exclusively locked.","Check if this <code>RwLock</code> is currently exclusively locked.","Check if this <code>RwLock</code> is currently exclusively locked.","Checks whether the mutex is currently held by the current …","Checks whether the mutex is currently held by the current …","Leaks the mutex guard and returns a mutable reference to …","Acquires this mutex, blocking the current thread until it …","Acquires a mutex, blocking the current thread until it is …","Acquires this mutex, blocking if it’s held by another …","Acquires a reentrant mutex, blocking the current thread …","Acquires an exclusive lock, blocking the current thread …","Acquires a shared lock, blocking the current thread until …","Acquires a shared lock without deadlocking in case of a …","Acquires an upgradable lock, blocking the current thread …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Returns a reference to the original <code>Mutex</code> object.","Creates a new mutex in an unlocked state ready for use.","Creates a new reentrant mutex in an unlocked state ready …","Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.","Returns a non-zero thread ID which identifies the current …","Returns the underlying raw mutex object.","Returns the underlying raw mutex object.","Returns the underlying raw reader-writer lock object.","Locks this <code>RwLock</code> with shared read access, blocking the …","Locks this <code>RwLock</code> with shared read access, blocking the …","Returns a reference to the original <code>ReentrantMutex</code> object.","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire an exclusive lock without blocking.","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire a shared lock without blocking.","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock without deadlocking in …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire an upgradable lock without blocking.","Attempts to acquire an upgradable lock until a timeout is …","Attempts to acquire an upgradable lock until a timeout is …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to lock this <code>RwLock</code> with exclusive write access.","Attempts to acquire this <code>RwLock</code> with exclusive write …","Attempts to acquire this <code>RwLock</code> with exclusive write …","","","","","","","","","","","","","","","","Unlocks this mutex.","Unlocks this mutex. The inner mutex may not be unlocked if …","Releases an exclusive lock.","Releases an exclusive lock using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol. The inner …","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Releases a shared lock.","Releases a shared lock using a fair unlock protocol.","Releases an upgradable lock.","Releases an upgradable lock using a fair unlock protocol.","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Locks this <code>RwLock</code> with upgradable read access, blocking …","Upgrades an upgradable lock to an exclusive lock.","Atomically upgrades an upgradable read lock lock into a …","Locks this <code>RwLock</code> with exclusive write access, blocking …"],"i":[35,36,0,15,16,0,0,15,4,5,16,35,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,41,12,3,18,5,13,6,19,14,8,9,11,21,22,40,41,12,3,18,5,13,6,19,14,8,9,11,21,22,1,1,3,5,6,8,9,11,7,7,7,7,10,10,12,13,14,12,13,14,12,13,14,3,18,6,19,8,9,11,21,22,3,18,9,22,23,9,11,24,9,24,3,18,6,19,8,9,11,21,22,12,3,3,18,18,13,6,6,19,19,14,8,8,9,9,11,11,21,21,22,22,12,13,12,13,14,14,14,14,40,41,12,12,12,3,18,5,13,13,13,6,19,14,14,14,8,9,11,21,22,12,13,14,40,41,12,3,18,5,13,6,19,14,8,9,11,21,22,12,13,14,15,15,12,5,13,16,16,14,16,16,14,5,13,3,15,12,5,13,16,16,32,20,3,18,6,19,8,9,21,22,3,12,13,14,4,12,13,14,14,14,6,8,9,11,40,41,12,3,18,5,13,6,19,14,8,9,11,21,22,40,41,12,3,18,5,13,6,19,14,8,9,11,21,22,15,12,5,13,16,36,36,35,12,5,13,16,36,32,37,37,36,35,12,5,13,20,38,38,3,18,6,19,8,9,21,22,14,14,14,14,14,14,14,14,14,20,11,38,11,38,11,14,14,14,40,41,12,3,18,5,13,6,19,14,8,9,11,21,22,15,5,16,7,1,3,18,5,6,19,8,9,11,21,22,16,7,20,10,3,6,8,9,11,3,6,8,9,11,14,20,11,14],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1,2]]]],[[[5,[1,4]]]],[[[6,[1,4,2]]]],[[[8,[7,2]]]],[[[9,[7,2]]]],[[[11,[10,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],13],[[],14],[[[12,[15,2]]]],[[[13,[15,4,2]]]],[[[14,[16,2]]]],[[],[[12,[15,[0,[2,17]]]]]],[[],[[13,[15,4,[0,[2,17]]]]]],[[],[[14,[16,[0,[2,17]]]]]],[[[3,[15,2]]]],[[[18,[15,2]]]],[[[6,[15,4,2]]]],[[[19,[15,4,2]]]],[[[8,[16,2]]]],[[[9,[16,2]]]],[[[11,[20,2]]]],[[[21,[16,2]]]],[[[22,[16,2]]]],[[[3,[15,2]]]],[[[18,[15,2]]]],[[[9,[16,2]]]],[[[22,[16,2]]]],[[]],[[[9,[23,2]]],[[8,[23,2]]]],[[[11,[24,2]]],[[8,[24,2]]]],[[]],[[[9,[24,2]]],[[11,[24,2]]]],[[]],[[[3,[15,2]]]],[[[18,[15,2]]]],[[[6,[15,4,2]]]],[[[19,[15,4,2]]]],[[[8,[16,2]]]],[[[9,[16,2]]]],[[[11,[20,2]]]],[[[21,[16,2]]]],[[[22,[16,2]]]],[[[12,[15,[0,[2,25]]]],26],27],[[[3,[15,[0,[28,2]]]],26],27],[[[3,[15,[0,[25,2]]]],26],27],[[[18,[15,[0,[25,2]]]],26],27],[[[18,[15,[0,[28,2]]]],26],27],[[[13,[15,4,[0,[2,25]]]],26],27],[[[6,[15,4,[0,[28,2]]]],26],27],[[[6,[15,4,[0,[25,2]]]],26],27],[[[19,[15,4,[0,[25,2]]]],26],27],[[[19,[15,4,[0,[28,2]]]],26],27],[[[14,[16,[0,[2,25]]]],26],27],[[[8,[16,[0,[25,2]]]],26],27],[[[8,[16,[0,[28,2]]]],26],27],[[[9,[16,[0,[25,2]]]],26],27],[[[9,[16,[0,[28,2]]]],26],27],[[[11,[20,[0,[25,2]]]],26],27],[[[11,[20,[0,[28,2]]]],26],27],[[[21,[16,[0,[28,2]]]],26],27],[[[21,[16,[0,[25,2]]]],26],27],[[[22,[16,[0,[25,2]]]],26],27],[[[22,[16,[0,[28,2]]]],26],27],[[[12,[15,2]]]],[[[13,[15,4,2]]]],[[[12,[1,2]]]],[[[13,[1,4,2]]]],[[[14,[16,2]]]],[[[14,[7,2]]]],[[[14,[16,2]]]],[[[14,[7,2]]]],[[]],[[]],[29],[[]],[[],[[12,[15]]]],[[]],[[]],[[]],[[]],[[],[[13,[15,4]]]],[29],[[]],[[]],[[],[[14,[16]]]],[29],[[]],[[]],[[]],[[]],[[]],[[]],[[[12,[15,2]]]],[[[13,[15,4,2]]]],[[[14,[16,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[12,[15]]]],[[[13,[15,4]]]],[[[14,[16]]]],[[],30],[[],30],[[[12,[15,2]]],30],[[[5,[15,4]]],30],[[[13,[15,4,2]]],30],[[],30],[[],30],[[[14,[16,2]]],30],[[],30],[[],30],[[[14,[16,2]]],30],[[[5,[15,4]]],30],[[[13,[15,4,2]]],30],[[[3,[15,2]]]],[[]],[[[12,[15,2]]],[[3,[15,2]]]],[[[5,[15,4]]]],[[[13,[15,4,2]]],[[6,[15,4,2]]]],[[]],[[]],[[]],[[]],[[[3,[15,2]]],[[18,[15,2]]]],[[[18,[15,2]]],[[18,[15,2]]]],[[[6,[15,4,2]]],[[19,[15,4,2]]]],[[[19,[15,4,2]]],[[19,[15,4,2]]]],[[[8,[16,2]]],[[21,[16,2]]]],[[[9,[16,2]]],[[22,[16,2]]]],[[[21,[16,2]]],[[21,[16,2]]]],[[[22,[16,2]]],[[22,[16,2]]]],[[[3,[15,2]]],12],[[],[[12,[15]]]],[[],[[13,[15,4]]]],[[],[[14,[16]]]],[[],31],[[[12,[15,2]]]],[[[13,[15,4,2]]]],[[[14,[16,2]]]],[[[14,[16,2]]],[[8,[16,2]]]],[[[14,[32,2]]],[[8,[32,2]]]],[[[6,[15,4,2]]],13],[[[8,[16,2]]],14],[[[9,[16,2]]],14],[[[11,[20,2]]],14],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],30],[[[12,[15,2]]],[[34,[[3,[15,2]]]]]],[[[5,[15,4]]],30],[[[13,[15,4,2]]],[[34,[[6,[15,4,2]]]]]],[[],30],[[],30],[[],30],[[],30],[[[12,[35,2]]],[[34,[[3,[35,2]]]]]],[[[5,[35,4]]],30],[[[13,[35,4,2]]],[[34,[[6,[35,4,2]]]]]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[[12,[35,2]]],[[34,[[3,[35,2]]]]]],[[[5,[35,4]]],30],[[[13,[35,4,2]]],[[34,[[6,[35,4,2]]]]]],[[],30],[[],30],[[],30],[[[3,[15,2]]],[[33,[[18,[15,2]],[3,[15,2]]]]]],[[[18,[15,2]]],[[33,[[18,[15,2]],[18,[15,2]]]]]],[[[6,[15,4,2]]],[[33,[[19,[15,4,2]],[6,[15,4,2]]]]]],[[[19,[15,4,2]]],[[33,[[19,[15,4,2]],[19,[15,4,2]]]]]],[[[8,[16,2]]],[[33,[[21,[16,2]],[8,[16,2]]]]]],[[[9,[16,2]]],[[33,[[22,[16,2]],[9,[16,2]]]]]],[[[21,[16,2]]],[[33,[[21,[16,2]],[21,[16,2]]]]]],[[[22,[16,2]]],[[33,[[22,[16,2]],[22,[16,2]]]]]],[[[14,[16,2]]],[[34,[[8,[16,2]]]]]],[[[14,[36,2]]],[[34,[[8,[36,2]]]]]],[[[14,[32,2]]],[[34,[[8,[32,2]]]]]],[[[14,[37,2]]],[[34,[[8,[37,2]]]]]],[[[14,[37,2]]],[[34,[[8,[37,2]]]]]],[[[14,[36,2]]],[[34,[[8,[36,2]]]]]],[[[14,[20,2]]],[[34,[[11,[20,2]]]]]],[[[14,[38,2]]],[[34,[[11,[38,2]]]]]],[[[14,[38,2]]],[[34,[[11,[38,2]]]]]],[[],30],[[[11,[20,2]]],[[33,[[9,[20,2]],[11,[20,2]]]]]],[[],30],[[[11,[38,2]]],[[33,[[9,[38,2]],[11,[38,2]]]]]],[[],30],[[[11,[38,2]]],[[33,[[9,[38,2]],[11,[38,2]]]]]],[[[14,[16,2]]],[[34,[[9,[16,2]]]]]],[[[14,[36,2]]],[[34,[[9,[36,2]]]]]],[[[14,[36,2]]],[[34,[[9,[36,2]]]]]],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[]],[[[5,[15,4]]]],[[]],[[]],[[]],[[[3,[1,2]]]],[[[18,[1,2]]]],[[[5,[1,4]]]],[[[6,[1,4,2]]]],[[[19,[1,4,2]]]],[[[8,[7,2]]]],[[[9,[7,2]]]],[[[11,[10,2]]]],[[[21,[7,2]]]],[[[22,[7,2]]]],[[]],[[]],[[]],[[]],[[[3,[15,2]]]],[[[6,[15,4,2]]]],[[[8,[16,2]]]],[[[9,[16,2]]]],[[[11,[20,2]]]],[[[3,[1,2]]]],[[[6,[1,4,2]]]],[[[8,[7,2]]]],[[[9,[7,2]]]],[[[11,[10,2]]]],[[[14,[20,2]]],[[11,[20,2]]]],[[]],[[[11,[20,2]]],[[9,[20,2]]]],[[[14,[16,2]]],[[9,[16,2]]]]],"p":[[8,"RawMutexFair"],[8,"Sized"],[3,"MutexGuard"],[8,"GetThreadId"],[3,"RawReentrantMutex"],[3,"ReentrantMutexGuard"],[8,"RawRwLockFair"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[8,"RawRwLockUpgradeFair"],[3,"RwLockUpgradableReadGuard"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"RwLock"],[8,"RawMutex"],[8,"RawRwLock"],[8,"Default"],[3,"MappedMutexGuard"],[3,"MappedReentrantMutexGuard"],[8,"RawRwLockUpgrade"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawRwLockDowngrade"],[8,"RawRwLockUpgradeDowngrade"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Display"],[15,"never"],[15,"bool"],[3,"NonZeroUsize"],[8,"RawRwLockRecursive"],[4,"Result"],[4,"Option"],[8,"RawMutexTimed"],[8,"RawRwLockTimed"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgradeTimed"],[3,"TypeId"],[3,"GuardSend"],[3,"GuardNoSend"]]},\
"page_table":{"doc":"x","t":[8,18,18,18,18,18,18,18,18,18,3,8,18,6,18,18,18,3,3,3,3,3,3,13,8,13,4,18,18,3,6,18,3,8,3,8,18,18,18,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,12,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11],"n":["Decorator","INVALID","INVALID","LEVEL_BITS","MAX","MAX","MAX","MAX","MAX_LEVEL","MIN","MaybeInvalidPPN","MmuMeta","PAGE_BITS","PPN","PPN_MASK","PPN_POS","P_ADDR_BITS","PageNumber","PageTable","PageTableFormatter","Physical","Pos","Pte","Pte","Space","Target","Update","VALID","VALID_FLAG","VAddr","VPN","V_ADDR_BITS","Virtual","Visitor","VmFlags","VmMeta","ZERO","ZERO","ZERO","add","add","add_assign","add_assign","align_level","align_level","arrive","arrive","as_mut_ptr","as_ptr","as_ptr","base","base","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","block","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_pte","bytes_in_page","bytes_in_table","ceil","ceil","ceil","clear_ppn","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","contains","down","eq","eq","eq","eq","eq","eq","eq","f","flags","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_flags","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_raw_parts","from_root","get","hash","hash","hash","hash","hash","hash","index","index_in","index_in","index_mut","into","into","into","into","into","into","into","into","into","into","into","invalid","is_huge","is_huge","is_huge","is_leaf","is_leaf","is_leaf","is_valid","is_valid","level","level","meet","meet","new","new","new","new","next","offset","pages_in_table","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","ppn","ppn","prev","pt","range","set_ppn","stop","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","up","vaddr_range","vaddr_range","val","val","val","valid","vpn","walk","walk_mut"],"q":["page_tabled":["<code>Meta</code> 方案的页表访问机制。","无效的物理页号，作为 NULL 使用。","无效的物理页号，作为 NULL 使用。","各级页内虚地址位数位数。","最大物理页号。","最大虚拟页号。","最大物理页号。","最大虚拟页号。","页表最大级别。","最小页号。","一个可能无效的物理页号。","地址转换单元元数据。","页内偏移的位数。","物理页号。","页表项中的物理页号掩码。","物理页号在 PTE 中的位置。","物理地址位数，用于计算物理页号形式。","页号。","页表。","页表格式化器。","物理地址空间。","<code>Meta</code> 方案中页表上的一个位置。","页表项。","新建中间页表。","地址空间标记。","修改目标。","遍历中断时的更新方案。","表示页表项有效的属性。","表示页表项有效的标志位。","虚拟地址。","虚拟页号。","…","虚地址空间。","<code>Meta</code> 方案的页表访问机制。","页表项属性。","页式虚存元数据。","页号零。","空页表项属性。","空白页表项。","","","","","虚页的对齐级别，使虚页在页表中序号为 0 …","虚页的对齐级别，使虚页在页表中序号为 0 …","到达 <code>target_hint</code> 节点。","到达 <code>target_hint</code> 节点。","将虚地址转化为任意可变指针。","获取指向第一个页表项的指针。","将虚地址转化为任意指针。","虚页的起始地址。","虚页的起始地址。","","","","","","","在访问 <code>target</code> 的过程中，经过一个包括 <code>target</code> …","在访问 <code>target</code> 的过程中，经过一个包括 <code>target</code> …","","","","","","","","","","","","","","","","","","","","","","","构造具有 <code>self</code> 页表项属性，并指向 <code>ppn</code> …","<code>level</code> 级页容纳的总字节数。","<code>level</code> 级页表容纳的总字节数。","不包含这个虚页的 <code>level</code> 级页表起始地址。","不包含这个虚页的 <code>level</code> 级页表起始地址。","不包括这个虚地址的最前页的页号。","清除页表项中的 ppn。","","","","","","","","","","","","","","判断是否包含所有指定的位。","向下移动一页。","","","","","","","","物理页转换为指针。","取出页表项属性。","包含这个虚页的 <code>level</code> 级页表起始地址。","包含这个虚页的 <code>level</code> 级页表起始地址。","包括这个虚地址最后页的页号。","","","","","","","","","","格式化特性位。","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","将 <code>raw</code> 整数转化为一个页表项属性。","从指向第一个页表项的指针创建页表。","从指向根页表的指针创建页表。","取出物理页号。","","","","","","","","虚页在 <code>level</code> 级页表中的位置。","虚页在 <code>level</code> 级页表中的位置。","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","新建一个无效物理页号。","判断页表项指向的是一个大于 0 级（4 …","如果页表项指向一个非 0 级的页，返回 <code>true</code>。","如果页表项指向一个非 0 级的页，返回 <code>true</code>。","如果页表项指向物理页，则返回 <code>true</code>。","如果页表项指向一个页而非子页表，返回 <code>true</code>…","如果页表项指向一个页而非子页表，返回 <code>true</code>…","判断页表项是否有效。","如果页表项有效，返回 <code>true</code>。","获取页表级别。","目标页表项的级别。","在访问 <code>target</code> 的过程中，经过一个包括 <code>target</code> …","在访问 <code>target</code> 的过程中，经过一个包括 <code>target</code> …","新建一个页号。","从一个物理页号新建。","…","新建目标。","向后移动一页。","页内偏移。","<code>level</code> 级页表容纳的总页数。","","","","","","从 PTE 中获得 PPN。","获取页表项指向的物理页号。","向前移动一页。","根页表。","获取页表容纳的虚页号范围。","设置页表项的 ppn。","结束遍历。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","向上移动一页。","包含这个虚页的 <code>level</code> …","包含这个虚页的 <code>level</code> …","获取页号值。","虚地址值。","取出值。","如果页表项有效，返回 <code>true</code>。","目标页表项包含的一个虚页号。","使用访问器 <code>visitor</code> 遍历页表。","使用访问器 <code>visitor</code> 遍历并修改页表。"],"i":[0,13,3,33,13,6,3,3,1,3,0,0,33,0,1,33,33,0,0,0,0,0,0,12,0,12,0,11,33,0,0,1,0,0,0,0,3,11,8,3,5,3,5,6,3,34,35,5,10,5,6,3,11,11,11,11,11,11,34,35,24,12,10,3,15,7,16,5,11,8,9,24,12,10,3,15,7,16,5,11,8,9,11,1,1,6,3,5,1,3,15,7,16,5,11,8,9,3,15,7,16,5,11,9,3,15,7,16,5,11,8,24,8,6,3,5,13,6,24,15,7,5,11,8,9,33,24,12,10,3,15,7,16,5,5,5,11,8,9,11,10,10,16,3,15,7,16,5,11,10,6,3,10,24,12,10,3,15,7,16,5,11,8,9,16,1,11,8,33,11,8,33,8,10,9,34,35,3,16,5,9,9,5,1,3,15,7,16,5,1,8,9,24,10,1,9,24,12,10,3,15,7,16,5,11,8,9,24,12,10,3,15,7,16,5,11,8,9,24,12,10,3,15,7,16,5,11,8,9,9,6,3,3,5,11,11,9,10,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[1,2]],4],[[3,[1,2]]]],[[[5,[1]],4],[[5,[1]]]],[[[3,[1,2]],4]],[[[5,[1]],4]],[[[6,[1]]],4],[[[3,[1,7]]],4],[[8,9],9],[[8,9],9],[[[5,[1]]]],[[[10,[1]]],8],[[[5,[1]]]],[[[6,[1]]],[[5,[1]]]],[[[3,[1,7]]],[[5,[1]]]],[[[11,[1]],[11,[1]]]],[[[11,[1]],[11,[1]]]],[[[11,[1]],[11,[1]]]],[[[11,[1]],[11,[1]]]],[[[11,[1]],[11,[1]]]],[[[11,[1]],[11,[1]]]],[[4,8,9],9],[[4,8,9],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[11,[1]],[13,[1]]],[[8,[1]]]],[4,4],[4,4],[[[6,[1]],4],4],[[[3,[1,7]],4],4],[[[5,[1]]],[[6,[1]]]],[4],[[[3,[[0,[14,1]],[0,[14,2]]]]],[[3,[[0,[14,1]],[0,[14,2]]]]]],[15,15],[7,7],[[[16,[[0,[14,1]]]]],[[16,[[0,[14,1]]]]]],[[[5,[[0,[14,1]]]]],[[5,[[0,[14,1]]]]]],[[[11,[[0,[14,1]]]]],[[11,[[0,[14,1]]]]]],[[[8,[[0,[14,1]]]]],[[8,[[0,[14,1]]]]]],[[[9,[[0,[14,1]]]]],[[9,[[0,[14,1]]]]]],[[[3,[[0,[17,1]],[0,[17,2]]]],3],18],[[15,15],18],[[7,7],18],[[[16,[[0,[17,1]]]],16],18],[[[5,[[0,[17,1]]]],5],18],[[[11,[1]],[11,[1]]],19],[[[9,[1]]],[[9,[1]]]],[[[3,[[0,[20,1]],[0,[20,2]]]],3],19],[[15,15],19],[[7,7],19],[[[16,[[0,[20,1]]]],16],19],[[[5,[[0,[20,1]]]],5],19],[[[11,[[0,[20,1]]]],11],19],[[[8,[[0,[20,1]]]],8],19],0,[[[8,[1]]],[[11,[1]]]],[[[6,[1]],4],[[6,[1]]]],[[[3,[1,7]],4],[[3,[1,7]]]],[[[5,[1]]],[[6,[1]]]],[[[13,[1]],21],22],[[[6,[1]],21],22],[[[24,[1,23]],21],22],[[15,21],22],[[7,21],22],[[[5,[1]],21],22],[[[11,[[0,[25,1]]]],21],22],[[[8,[1]],21],22],[[[9,[1]],21],22],[[21,4],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,[[5,[1]]]],[[],[[5,[1]]]],[[]],[[]],[[]],[4,[[11,[1]]]],[[[26,[[8,[1]]]],[6,[1]],4],[[10,[1]]]],[[[26,[[8,[1]]]]],[[10,[1]]]],[[[16,[1]]],[[27,[[13,[1]]]]]],[[[3,[[0,[28,1]],[0,[28,2]]]]]],[15],[7],[[[16,[[0,[28,1]]]]]],[[[5,[[0,[28,1]]]]]],[[[11,[[0,[28,1]]]]]],[[[10,[1]],4]],[[[6,[1]],4],4],[[[3,[1,7]],4],4],[[[10,[1]],4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[16,[1]]]],[[4,4],19],[[[11,[1]],4],19],[[[8,[1]],4],19],[4,19],[[[11,[1]]],19],[[[8,[1]]],19],[4,19],[[[8,[1]]],19],[[[10,[1]]],4],0,[[4,8,9],[[27,[[26,[8]]]]]],[[4,8,9],[[27,[[26,[8]]]]]],[4,[[3,[1,2]]]],[[[13,[1]]],[[16,[1]]]],[4,[[5,[1]]]],[[[6,[1]],4],[[9,[1]]]],[[[9,[1]]],[[9,[1]]]],[[[5,[1]]],4],[4,4],[[[3,[[0,[29,1]],[0,[29,2]]]],3],[[27,[18]]]],[[15,15],[[27,[18]]]],[[7,7],[[27,[18]]]],[[[16,[[0,[29,1]]]],16],[[27,[18]]]],[[[5,[[0,[29,1]]]],5],[[27,[18]]]],[4,13],[[[8,[1]]],[[13,[1]]]],[[[9,[1]]],[[9,[1]]]],0,[[[10,[1]]],[[30,[[6,[1]]]]]],[[4,13]],[[],[[9,[1]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[[9,[1]]],[[9,[1]]]],[[[6,[1]],4],[[30,[[5,[1]]]]]],[[[3,[1,7]],4],[[30,[[5,[1]]]]]],[[[3,[1,2]]],4],[[[5,[1]]],4],[[[11,[1]]],4],[[[11,[1]]],19],0,[[[10,[1]],[9,[1]]]],[[[10,[1]],[9,[1]]]]],"p":[[8,"VmMeta"],[8,"Space"],[3,"PageNumber"],[15,"usize"],[3,"VAddr"],[6,"VPN"],[3,"Virtual"],[3,"Pte"],[3,"Pos"],[3,"PageTable"],[3,"VmFlags"],[4,"Update"],[6,"PPN"],[8,"Clone"],[3,"Physical"],[3,"MaybeInvalidPPN"],[8,"Ord"],[4,"Ordering"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Fn"],[3,"PageTableFormatter"],[8,"Debug"],[3,"NonNull"],[4,"Option"],[8,"Hash"],[8,"PartialOrd"],[3,"Range"],[4,"Result"],[3,"TypeId"],[8,"MmuMeta"],[8,"Visitor"],[8,"Decorator"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out of …","t":[4,3,8,11,11,11,11,14,11,11,11,11,11,11,11,5,11,11,11,10,11,11,11,11,11,11,11,11],"n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":["scopeguard","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected value.","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred closure …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through deref) …"],"i":[0,0,0,1,4,1,4,0,1,1,1,1,4,1,4,0,1,4,1,8,4,1,4,1,4,1,4,1],"f":[0,0,0,[[]],[[]],[[]],[[]],0,[1],[1],[1],[[1,2],3],[[4,2],3],[[]],[[]],[[],[[1,[4]]]],[[]],[[]],[1],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],1]],"p":[[3,"ScopeGuard"],[3,"Formatter"],[6,"Result"],[4,"Always"],[15,"bool"],[4,"Result"],[3,"TypeId"],[8,"Strategy"]]},\
"spin":{"doc":"This crate provides spin-based versions of the primitives …","t":[6,6,6,2,6,2,6,2,6,6,2,0,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,6,6,3,3,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Barrier","Lazy","Mutex","MutexGuard","Once","RelaxStrategy","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","Spin","barrier","lazy","lock_api","mutex","once","relax","rwlock","Barrier","BarrierWaitResult","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_leader","new","try_from","try_from","try_into","try_into","type_id","type_id","wait","Lazy","as_mut_ptr","borrow","borrow_mut","default","deref","fmt","force","from","into","new","try_from","try_into","type_id","Mutex","MutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","Mutex","MutexGuard","SpinMutex","SpinMutexGuard","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","is_locked","leak","lock","lock","new","spin","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","SpinMutex","SpinMutexGuard","as_mut_ptr","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","is_locked","leak","lock","lock","new","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","INIT","Once","as_mut_ptr","borrow","borrow_mut","call_once","default","drop","fmt","from","from","from","get","get_mut","get_mut_unchecked","get_unchecked","initialized","into","into_inner_unchecked","is_completed","new","poll","try_call_once","try_from","try_into","try_into_inner","type_id","wait","Loop","RelaxStrategy","Spin","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","relax","relax","relax","try_from","try_from","try_into","try_into","type_id","type_id","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","as_mut_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradeable","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_read_decrement","force_write_unlock","from","from","from","from","from","from","get_mut","into","into","into","into","into_inner","is_locked","leak","leak","leak","lock_exclusive","lock_shared","lock_upgradable","new","read","reader_count","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_lock_exclusive","try_lock_shared","try_lock_upgradable","try_read","try_upgrade","try_upgrade","try_upgradeable_read","try_write","type_id","type_id","type_id","type_id","unlock_exclusive","unlock_shared","unlock_upgradable","upgrade","upgrade","upgradeable_read","write","writer_count"],"q":["spin","","","","","","","","","","","","","","","","","","spin::barrier","","","","","","","","","","","","","","","","","","","spin::lazy","","","","","","","","","","","","","","spin::lock_api","","","","","","spin::mutex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin::mutex::spin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin::once","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin::relax","","","","","","","","","","","","","","","","","","","","spin::rwlock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A primitive that synchronizes the execution of multiple …","A value which is initialized on the first access. See …","A primitive that synchronizes the execution of multiple …","","A primitive that provides lazy one-time initialization. …","","A lock that provides data access to either one writer or …","","A guard that provides immutable data access but can be …","A guard that provides mutable data access. See …","","Synchronization primitive allowing multiple threads to …","Synchronization primitives for lazy evaluation.","Spin synchronisation primitives, but compatible with …","Locks that have the same behaviour as a mutex.","Synchronization primitives for one-time evaluation.","Strategies that determine the behaviour of locks when …","A lock that provides data access to either one writer or …","A primitive that synchronizes the execution of multiple …","A <code>BarrierWaitResult</code> is returned by <code>wait</code> when all threads …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether this thread from <code>wait</code> is the “leader …","Creates a new barrier that can block a given number of …","","","","","","","Blocks the current thread until all threads have …","A value which is initialized on the first access.","Retrieves a mutable pointer to the inner data.","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new lazy value with the given initializing …","","","","A lock that provides mutually exclusive data access …","A guard that provides mutable data access (compatible with …","A lock that provides data access to either one writer or …","A guard that provides immutable data access (compatible …","A guard that provides immutable data access but can be …","A guard that provides mutable data access (compatible with …","A spin-based lock providing mutually exclusive access to …","A generic guard that will protect some data access and …","","","","","","","","","","","","","Force unlock this <code>Mutex</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Mutex</code> and unwraps the underlying data.","","Returns <code>true</code> if the lock is currently held.","Leak the lock guard, yielding a mutable reference to the …","Locks the <code>Mutex</code> and returns a guard that permits access to …","","Creates a new <code>Mutex</code> wrapping the supplied data.","A naïve spinning mutex.","","","","","","Try to lock this <code>Mutex</code>, returning a lock guard if …","","","","A spin lock providing mutually exclusive access to data.","A guard that provides mutable data access.","Returns a mutable pointer to the underlying data.","","","","","","","","The dropping of the MutexGuard will release the lock it …","","","","Force unlock this <code>SpinMutex</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>SpinMutex</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","","Leak the lock guard, yielding a mutable reference to the …","","Locks the <code>SpinMutex</code> and returns a guard that permits …","Creates a new <code>SpinMutex</code> wrapping the supplied data.","","","","","","Try to lock this <code>SpinMutex</code>, returning a lock guard if …","","","","Initialization constant of <code>Once</code>.","A primitive that provides lazy one-time initialization.","Retrieve a pointer to the inner data.","","","Performs an initialization routine once and only once. The …","","","","Returns the argument unchanged.","","","Returns a reference to the inner value if the <code>Once</code> has …","Returns a mutable reference to the inner value if the <code>Once</code> …","Returns a mutable reference to the inner value","Returns a reference to the inner value on the unchecked …","Creates a new initialized <code>Once</code>.","Calls <code>U::from(self)</code>.","Returns a the inner value if the <code>Once</code> has been initialized.","Checks whether the value has been initialized.","Creates a new <code>Once</code>.","Like <code>Once::get</code>, but will spin if the <code>Once</code> is in the …","This method is similar to <code>call_once</code>, but allows the given …","","","Returns a the inner value if the <code>Once</code> has been initialized.","","Spins until the <code>Once</code> contains a value.","A strategy that rapidly spins, without telling the CPU to …","A trait implemented by spinning relax strategies.","A strategy that rapidly spins while informing the CPU that …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Perform the relaxing operation during a period of …","","","","","","","","","A lock that provides data access to either one writer or …","A guard that provides immutable data access.","A guard that provides immutable data access but can be …","A guard that provides mutable data access.","Returns a mutable pointer to the underying data.","","","","","","","","","","","","","","","Downgrades the writable lock guard to a readable, shared …","Downgrades the upgradeable lock guard to a readable, …","Downgrades the writable lock guard to an upgradable, …","","","","","","","","","","","Force decrement the reader count.","Force unlock exclusive write access.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>RwLock</code>, returning the underlying data.","","Leak the lock guard, yielding a reference to the …","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a reference to the …","","","","Creates a new spinlock wrapping the supplied data.","Locks this rwlock with shared read access, blocking the …","Return the number of readers that currently hold the lock …","","","","","","","","","","","","Attempt to acquire this lock with shared read access.","","Tries to upgrade an upgradeable lock guard to a writable …","Tries to obtain an upgradeable lock guard.","Attempt to lock this rwlock with exclusive write access.","","","","","","","","","Upgrades an upgradeable lock guard to a writable lock …","Obtain a readable lock guard that can later be upgraded to …","Lock this rwlock with exclusive write access, blocking the …","Return the number of writers that currently hold the lock."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,4,1,4,1,4,1,1,4,4,1,4,1,4,1,4,0,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,15,16,15,16,15,16,16,15,16,16,15,15,15,15,16,15,15,16,15,15,15,16,15,15,15,0,15,16,15,16,15,15,15,16,15,0,0,20,20,21,20,21,20,21,21,21,20,21,21,20,20,20,20,21,20,20,21,20,20,20,21,20,20,20,20,21,20,21,20,20,20,21,20,22,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,27,28,27,28,27,28,27,28,7,27,28,27,28,27,28,27,28,0,0,0,0,23,23,24,25,26,23,24,25,26,23,24,25,26,25,23,25,26,25,24,25,26,23,24,24,25,25,26,26,23,23,23,23,23,24,25,26,23,23,24,25,26,23,23,24,25,26,23,23,23,23,23,23,23,24,25,26,23,24,25,26,23,23,23,23,23,26,23,23,23,24,25,26,23,23,23,23,26,23,23,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[3,4],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[[4,[7]]],1],0,[8],[[]],[[]],[[],[[8,[9]]]],[[[8,[10,7]]]],[[[8,[11]],12],13],[[[8,[10,7]]]],[[]],[[]],[[],8],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],[[15,[[0,[14,9]]]]]],[[[16,[14]]]],[[[16,[14]]]],[[[15,[[0,[14,11]]]],12],13],[[[16,[[0,[14,17]]]],12],13],[[[16,[[0,[14,11]]]],12],13],[[[15,[14]]]],[[],15],[[]],[18],[[]],[[[15,[14]]]],[[]],[[]],[15],[[[15,[7]]],2],[[[15,[14]]],2],[[[16,[14]]]],[[[15,[14,7]]],[[16,[14]]]],[[[15,[7]]]],[[],15],0,[[],5],[[],5],[[],5],[[],5],[[[15,[7]]],2],[[[15,[14]]],[[19,[[16,[14]]]]]],[[],6],[[],6],[[[15,[7]]]],0,0,[20],[[]],[[]],[[]],[[]],[[],[[20,[[0,[14,9]]]]]],[[[21,[14]]]],[[[21,[14]]]],[[[21,[14]]]],[[[20,[[0,[14,11]]]],12],13],[[[21,[[0,[14,17]]]],12],13],[[[21,[[0,[14,11]]]],12],13],[[[20,[14]]]],[18],[[]],[[],20],[[]],[[[20,[14]]]],[[]],[[]],[20],[[[20,[14]]],2],[[[20,[7]]],2],[[[21,[14]]]],[[[20,[7]]]],[[[20,[14,7]]],[[21,[14]]]],[[],20],[[],5],[[],5],[[],5],[[],5],[[[20,[7]]],2],[[[20,[14]]],[[19,[[21,[14]]]]]],[[],6],[[],6],[[[20,[7]]]],0,0,[22],[[]],[[]],[[[22,[7]],10]],[[],22],[22],[[[22,[11]],12],13],[[]],[18],[[],22],[22,19],[22,19],[22],[22],[[],22],[[]],[22],[22,2],[[],22],[[[22,[7]]],19],[[[22,[7]],10],5],[[],5],[[],5],[22,19],[[],6],[[[22,[7]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],0,0,0,0,[23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[23,[[0,[14,9]]]]]],[[[24,[14]]]],[[[25,[14]]]],[[[26,[14]]]],[[[25,[14]]]],[[[23,[7]]]],[[[25,[14]]],[[24,[14]]]],[[[26,[14]]],[[24,[14]]]],[[[25,[14]]],[[26,[14]]]],[[[24,[14]]]],[[[25,[14]]]],[[[26,[14]]]],[[[23,[[0,[14,11]]]],12],13],[[[24,[[0,[14,17]]]],12],13],[[[24,[[0,[14,11]]]],12],13],[[[25,[[0,[14,17]]]],12],13],[[[25,[[0,[14,11]]]],12],13],[[[26,[[0,[14,17]]]],12],13],[[[26,[[0,[14,11]]]],12],13],[[[23,[14]]]],[[[23,[14]]]],[[],23],[[]],[18],[[]],[[]],[[]],[[[23,[14]]]],[[]],[[]],[[]],[[]],[23],[[[23,[7]]],2],[[[24,[14]]]],[[[25,[14]]]],[[[26,[14]]]],[[[23,[7]]]],[[[23,[7]]]],[[[23,[7]]]],[[],23],[[[23,[14,7]]],[[24,[14]]]],[[[23,[14]]],3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[23,[7]]],2],[[[23,[7]]],2],[[[23,[7]]],2],[[[23,[14]]],[[19,[[24,[14]]]]]],[[[23,[7]]],2],[[[26,[14]]],[[5,[[25,[14]],[26,[14]]]]]],[[[23,[14]]],[[19,[[26,[14]]]]]],[[[23,[14]]],[[19,[[25,[14]]]]]],[[],6],[[],6],[[],6],[[],6],[[[23,[7]]]],[[[23,[7]]]],[[[23,[7]]]],[[[23,[7]]]],[[[26,[14,7]]],[[25,[14,7]]]],[[[23,[14,7]]],[[26,[14,7]]]],[[[23,[14,7]]],[[25,[14,7]]]],[[[23,[14]]],3]],"p":[[3,"BarrierWaitResult"],[15,"bool"],[15,"usize"],[3,"Barrier"],[4,"Result"],[3,"TypeId"],[8,"RelaxStrategy"],[3,"Lazy"],[8,"Default"],[8,"FnOnce"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Sized"],[3,"Mutex"],[3,"MutexGuard"],[8,"Display"],[15,"never"],[4,"Option"],[3,"SpinMutex"],[3,"SpinMutexGuard"],[3,"Once"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableGuard"],[3,"Spin"],[3,"Loop"]]},\
"static_assertions":{"doc":"Banner","t":[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"n":["assert_cfg","assert_eq_align","assert_eq_size","assert_eq_size_ptr","assert_eq_size_val","assert_fields","assert_impl_all","assert_impl_any","assert_impl_one","assert_not_impl_all","assert_not_impl_any","assert_obj_safe","assert_trait_sub_all","assert_trait_super_all","assert_type_eq_all","assert_type_ne_all","const_assert","const_assert_eq","const_assert_ne"],"q":["static_assertions","","","","","","","","","","","","","","","","","",""],"d":["Asserts that a given configuration is set.","Asserts that types are equal in alignment.","Asserts that types are equal in size.","Asserts that values pointed to are equal in size.","Asserts that values are equal in size.","Asserts that the type has the given fields.","Asserts that the type implements <em>all</em> of the given traits.","Asserts that the type implements <em>any</em> of the given traits.","Asserts that the type implements exactly one in a set of …","Asserts that the type does <strong>not</strong> implement <em>all</em> of the given …","Asserts that the type does <strong>not</strong> implement <em>any</em> of the given …","Asserts that the traits support dynamic dispatch (…","Asserts that the trait is a child of all of the other …","Asserts that the trait is a parent of all of the other …","Asserts that <em>all</em> types in a list are equal to each other.","Asserts that <em>all</em> types are <strong>not</strong> equal to each other.","Asserts that constant expressions evaluate to <code>true</code>.","Asserts that constants are equal in value.","Asserts that constants are <strong>not</strong> equal in value."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
